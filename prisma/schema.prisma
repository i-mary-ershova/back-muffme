generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  name              String?
  phoneNumber       String             @unique
  birthday          DateTime?
  role              String             @default("USER")
  bonusBalance      Int                @default(0)
  bonusLevel        String             @default("STANDARD")
  totalSpent        Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  lastLoginAt       DateTime?
  bonusHistory      BonusHistory[]
  cart              Cart?
  orders            Order[]
  verificationCodes VerificationCode[]
}

model VerificationCode {
  id          Int      @id @default(autoincrement())
  userId      Int?
  phoneNumber String
  code        String
  isUsed      Boolean  @default(false)
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([phoneNumber, isUsed])
}

model Product {
  id            Int         @id @default(autoincrement())
  name          String
  description   String?
  ingredients   String
  pictureURL    String?
  price         Int
  bonusPercent  Int         @default(5)
  canPayByBonus Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  cartItems     CartItem[]
  orderItems    OrderItem[]
}

model Order {
  id           Int            @id @default(autoincrement())
  userId       Int
  totalAmount  Int
  totalBonus   Int            @default(0)
  usedBonus    Int            @default(0)
  status       String         @default("PENDING")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  bonusHistory BonusHistory[]
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items        OrderItem[]
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  orderId     Int
  productId   Int
  quantity    Int
  price       Int
  totalPrice  Int
  earnedBonus Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model BonusHistory {
  id          Int      @id @default(autoincrement())
  userId      Int
  orderId     Int?
  amount      Int
  type        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order?   @relation(fields: [orderId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Analytics {
  id        Int      @id @default(autoincrement())
  eventType String
  data      Json
  createdAt DateTime @default(now())
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id          Int      @id @default(autoincrement())
  cartId      Int
  productId   Int
  quantity    Int      @default(1)
  price       Int
  totalPrice  Int
  earnedBonus Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cart        Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
}

model Banner {
  id          Int      @id @default(autoincrement())
  imageUrl    String
  title       String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Taste {
  id          Int      @id @default(autoincrement())
  name        String
  imageUrl    String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MuffinConstruct {
  id          Int           @id @default(autoincrement())
  name        String
  imageUrl    String
  description String?
  price       Decimal       @db.Decimal(10, 2)
  type        ComponentType
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}


model Admin {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ComponentType {
  DOUGH
  FLAVOUR
  CREAM
  DECOR
}
